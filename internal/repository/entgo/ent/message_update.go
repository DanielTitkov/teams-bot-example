// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/dialog"
	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/message"
	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks      []Hook
	mutation   *MessageMutation
	predicates []predicate.Message
}

// Where adds a new predicate for the builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetText sets the text field.
func (mu *MessageUpdate) SetText(s string) *MessageUpdate {
	mu.mutation.SetText(s)
	return mu
}

// SetNillableText sets the text field if the given value is not nil.
func (mu *MessageUpdate) SetNillableText(s *string) *MessageUpdate {
	if s != nil {
		mu.SetText(*s)
	}
	return mu
}

// ClearText clears the value of text.
func (mu *MessageUpdate) ClearText() *MessageUpdate {
	mu.mutation.ClearText()
	return mu
}

// SetAttachment sets the attachment field.
func (mu *MessageUpdate) SetAttachment(s string) *MessageUpdate {
	mu.mutation.SetAttachment(s)
	return mu
}

// SetNillableAttachment sets the attachment field if the given value is not nil.
func (mu *MessageUpdate) SetNillableAttachment(s *string) *MessageUpdate {
	if s != nil {
		mu.SetAttachment(*s)
	}
	return mu
}

// ClearAttachment clears the value of attachment.
func (mu *MessageUpdate) ClearAttachment() *MessageUpdate {
	mu.mutation.ClearAttachment()
	return mu
}

// SetPayloadType sets the payload_type field.
func (mu *MessageUpdate) SetPayloadType(s string) *MessageUpdate {
	mu.mutation.SetPayloadType(s)
	return mu
}

// SetNillablePayloadType sets the payload_type field if the given value is not nil.
func (mu *MessageUpdate) SetNillablePayloadType(s *string) *MessageUpdate {
	if s != nil {
		mu.SetPayloadType(*s)
	}
	return mu
}

// ClearPayloadType clears the value of payload_type.
func (mu *MessageUpdate) ClearPayloadType() *MessageUpdate {
	mu.mutation.ClearPayloadType()
	return mu
}

// SetPayloadValue sets the payload_value field.
func (mu *MessageUpdate) SetPayloadValue(s string) *MessageUpdate {
	mu.mutation.SetPayloadValue(s)
	return mu
}

// SetNillablePayloadValue sets the payload_value field if the given value is not nil.
func (mu *MessageUpdate) SetNillablePayloadValue(s *string) *MessageUpdate {
	if s != nil {
		mu.SetPayloadValue(*s)
	}
	return mu
}

// ClearPayloadValue clears the value of payload_value.
func (mu *MessageUpdate) ClearPayloadValue() *MessageUpdate {
	mu.mutation.ClearPayloadValue()
	return mu
}

// SetSystem sets the system field.
func (mu *MessageUpdate) SetSystem(s string) *MessageUpdate {
	mu.mutation.SetSystem(s)
	return mu
}

// SetDirection sets the direction field.
func (mu *MessageUpdate) SetDirection(s string) *MessageUpdate {
	mu.mutation.SetDirection(s)
	return mu
}

// SetProactive sets the proactive field.
func (mu *MessageUpdate) SetProactive(b bool) *MessageUpdate {
	mu.mutation.SetProactive(b)
	return mu
}

// SetError sets the error field.
func (mu *MessageUpdate) SetError(s string) *MessageUpdate {
	mu.mutation.SetError(s)
	return mu
}

// SetNillableError sets the error field if the given value is not nil.
func (mu *MessageUpdate) SetNillableError(s *string) *MessageUpdate {
	if s != nil {
		mu.SetError(*s)
	}
	return mu
}

// ClearError clears the value of error.
func (mu *MessageUpdate) ClearError() *MessageUpdate {
	mu.mutation.ClearError()
	return mu
}

// SetDialogID sets the dialog edge to Dialog by id.
func (mu *MessageUpdate) SetDialogID(id int) *MessageUpdate {
	mu.mutation.SetDialogID(id)
	return mu
}

// SetDialog sets the dialog edge to Dialog.
func (mu *MessageUpdate) SetDialog(d *Dialog) *MessageUpdate {
	return mu.SetDialogID(d.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearDialog clears the dialog edge to Dialog.
func (mu *MessageUpdate) ClearDialog() *MessageUpdate {
	mu.mutation.ClearDialog()
	return mu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := message.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}

	if _, ok := mu.mutation.DialogID(); mu.mutation.DialogCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"dialog\"")
	}
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldUpdateTime,
		})
	}
	if value, ok := mu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldText,
		})
	}
	if mu.mutation.TextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldText,
		})
	}
	if value, ok := mu.mutation.Attachment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldAttachment,
		})
	}
	if mu.mutation.AttachmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldAttachment,
		})
	}
	if value, ok := mu.mutation.PayloadType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldPayloadType,
		})
	}
	if mu.mutation.PayloadTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldPayloadType,
		})
	}
	if value, ok := mu.mutation.PayloadValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldPayloadValue,
		})
	}
	if mu.mutation.PayloadValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldPayloadValue,
		})
	}
	if value, ok := mu.mutation.System(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldSystem,
		})
	}
	if value, ok := mu.mutation.Direction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldDirection,
		})
	}
	if value, ok := mu.mutation.Proactive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: message.FieldProactive,
		})
	}
	if value, ok := mu.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldError,
		})
	}
	if mu.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldError,
		})
	}
	if mu.mutation.DialogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.DialogTable,
			Columns: []string{message.DialogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dialog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.DialogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.DialogTable,
			Columns: []string{message.DialogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dialog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// SetText sets the text field.
func (muo *MessageUpdateOne) SetText(s string) *MessageUpdateOne {
	muo.mutation.SetText(s)
	return muo
}

// SetNillableText sets the text field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableText(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetText(*s)
	}
	return muo
}

// ClearText clears the value of text.
func (muo *MessageUpdateOne) ClearText() *MessageUpdateOne {
	muo.mutation.ClearText()
	return muo
}

// SetAttachment sets the attachment field.
func (muo *MessageUpdateOne) SetAttachment(s string) *MessageUpdateOne {
	muo.mutation.SetAttachment(s)
	return muo
}

// SetNillableAttachment sets the attachment field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableAttachment(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetAttachment(*s)
	}
	return muo
}

// ClearAttachment clears the value of attachment.
func (muo *MessageUpdateOne) ClearAttachment() *MessageUpdateOne {
	muo.mutation.ClearAttachment()
	return muo
}

// SetPayloadType sets the payload_type field.
func (muo *MessageUpdateOne) SetPayloadType(s string) *MessageUpdateOne {
	muo.mutation.SetPayloadType(s)
	return muo
}

// SetNillablePayloadType sets the payload_type field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillablePayloadType(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetPayloadType(*s)
	}
	return muo
}

// ClearPayloadType clears the value of payload_type.
func (muo *MessageUpdateOne) ClearPayloadType() *MessageUpdateOne {
	muo.mutation.ClearPayloadType()
	return muo
}

// SetPayloadValue sets the payload_value field.
func (muo *MessageUpdateOne) SetPayloadValue(s string) *MessageUpdateOne {
	muo.mutation.SetPayloadValue(s)
	return muo
}

// SetNillablePayloadValue sets the payload_value field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillablePayloadValue(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetPayloadValue(*s)
	}
	return muo
}

// ClearPayloadValue clears the value of payload_value.
func (muo *MessageUpdateOne) ClearPayloadValue() *MessageUpdateOne {
	muo.mutation.ClearPayloadValue()
	return muo
}

// SetSystem sets the system field.
func (muo *MessageUpdateOne) SetSystem(s string) *MessageUpdateOne {
	muo.mutation.SetSystem(s)
	return muo
}

// SetDirection sets the direction field.
func (muo *MessageUpdateOne) SetDirection(s string) *MessageUpdateOne {
	muo.mutation.SetDirection(s)
	return muo
}

// SetProactive sets the proactive field.
func (muo *MessageUpdateOne) SetProactive(b bool) *MessageUpdateOne {
	muo.mutation.SetProactive(b)
	return muo
}

// SetError sets the error field.
func (muo *MessageUpdateOne) SetError(s string) *MessageUpdateOne {
	muo.mutation.SetError(s)
	return muo
}

// SetNillableError sets the error field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableError(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetError(*s)
	}
	return muo
}

// ClearError clears the value of error.
func (muo *MessageUpdateOne) ClearError() *MessageUpdateOne {
	muo.mutation.ClearError()
	return muo
}

// SetDialogID sets the dialog edge to Dialog by id.
func (muo *MessageUpdateOne) SetDialogID(id int) *MessageUpdateOne {
	muo.mutation.SetDialogID(id)
	return muo
}

// SetDialog sets the dialog edge to Dialog.
func (muo *MessageUpdateOne) SetDialog(d *Dialog) *MessageUpdateOne {
	return muo.SetDialogID(d.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearDialog clears the dialog edge to Dialog.
func (muo *MessageUpdateOne) ClearDialog() *MessageUpdateOne {
	muo.mutation.ClearDialog()
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := message.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}

	if _, ok := muo.mutation.DialogID(); muo.mutation.DialogCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"dialog\"")
	}
	var (
		err  error
		node *Message
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (m *Message, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: message.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Message.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: message.FieldUpdateTime,
		})
	}
	if value, ok := muo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldText,
		})
	}
	if muo.mutation.TextCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldText,
		})
	}
	if value, ok := muo.mutation.Attachment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldAttachment,
		})
	}
	if muo.mutation.AttachmentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldAttachment,
		})
	}
	if value, ok := muo.mutation.PayloadType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldPayloadType,
		})
	}
	if muo.mutation.PayloadTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldPayloadType,
		})
	}
	if value, ok := muo.mutation.PayloadValue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldPayloadValue,
		})
	}
	if muo.mutation.PayloadValueCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldPayloadValue,
		})
	}
	if value, ok := muo.mutation.System(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldSystem,
		})
	}
	if value, ok := muo.mutation.Direction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldDirection,
		})
	}
	if value, ok := muo.mutation.Proactive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: message.FieldProactive,
		})
	}
	if value, ok := muo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: message.FieldError,
		})
	}
	if muo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: message.FieldError,
		})
	}
	if muo.mutation.DialogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.DialogTable,
			Columns: []string{message.DialogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dialog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.DialogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.DialogTable,
			Columns: []string{message.DialogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dialog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	m = &Message{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
