// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/DanielTitkov/teams-bot-example/internal/domain"
	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/dialog"
	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/message"
	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/user"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DialogCreate is the builder for creating a Dialog entity.
type DialogCreate struct {
	config
	mutation *DialogMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (dc *DialogCreate) SetCreateTime(t time.Time) *DialogCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (dc *DialogCreate) SetNillableCreateTime(t *time.Time) *DialogCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetUpdateTime sets the update_time field.
func (dc *DialogCreate) SetUpdateTime(t time.Time) *DialogCreate {
	dc.mutation.SetUpdateTime(t)
	return dc
}

// SetNillableUpdateTime sets the update_time field if the given value is not nil.
func (dc *DialogCreate) SetNillableUpdateTime(t *time.Time) *DialogCreate {
	if t != nil {
		dc.SetUpdateTime(*t)
	}
	return dc
}

// SetMeta sets the meta field.
func (dc *DialogCreate) SetMeta(dm domain.DialogMeta) *DialogCreate {
	dc.mutation.SetMeta(dm)
	return dc
}

// SetNillableMeta sets the meta field if the given value is not nil.
func (dc *DialogCreate) SetNillableMeta(dm *domain.DialogMeta) *DialogCreate {
	if dm != nil {
		dc.SetMeta(*dm)
	}
	return dc
}

// AddMessageIDs adds the message edge to Message by ids.
func (dc *DialogCreate) AddMessageIDs(ids ...int) *DialogCreate {
	dc.mutation.AddMessageIDs(ids...)
	return dc
}

// AddMessage adds the message edges to Message.
func (dc *DialogCreate) AddMessage(m ...*Message) *DialogCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return dc.AddMessageIDs(ids...)
}

// SetUserID sets the user edge to User by id.
func (dc *DialogCreate) SetUserID(id int) *DialogCreate {
	dc.mutation.SetUserID(id)
	return dc
}

// SetUser sets the user edge to User.
func (dc *DialogCreate) SetUser(u *User) *DialogCreate {
	return dc.SetUserID(u.ID)
}

// Mutation returns the DialogMutation object of the builder.
func (dc *DialogCreate) Mutation() *DialogMutation {
	return dc.mutation
}

// Save creates the Dialog in the database.
func (dc *DialogCreate) Save(ctx context.Context) (*Dialog, error) {
	if err := dc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Dialog
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DialogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DialogCreate) SaveX(ctx context.Context) *Dialog {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DialogCreate) preSave() error {
	if _, ok := dc.mutation.CreateTime(); !ok {
		v := dialog.DefaultCreateTime()
		dc.mutation.SetCreateTime(v)
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		v := dialog.DefaultUpdateTime()
		dc.mutation.SetUpdateTime(v)
	}
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (dc *DialogCreate) sqlSave(ctx context.Context) (*Dialog, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DialogCreate) createSpec() (*Dialog, *sqlgraph.CreateSpec) {
	var (
		d     = &Dialog{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dialog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dialog.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dialog.FieldCreateTime,
		})
		d.CreateTime = value
	}
	if value, ok := dc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dialog.FieldUpdateTime,
		})
		d.UpdateTime = value
	}
	if value, ok := dc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: dialog.FieldMeta,
		})
		d.Meta = value
	}
	if nodes := dc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dialog.MessageTable,
			Columns: []string{dialog.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   dialog.UserTable,
			Columns: []string{dialog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}

// DialogCreateBulk is the builder for creating a bulk of Dialog entities.
type DialogCreateBulk struct {
	config
	builders []*DialogCreate
}

// Save creates the Dialog entities in the database.
func (dcb *DialogCreateBulk) Save(ctx context.Context) ([]*Dialog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dialog, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*DialogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DialogCreateBulk) SaveX(ctx context.Context) []*Dialog {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
