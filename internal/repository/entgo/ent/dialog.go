// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/DanielTitkov/teams-bot-example/internal/domain"
	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/dialog"
	"github.com/DanielTitkov/teams-bot-example/internal/repository/entgo/ent/user"
	"github.com/facebook/ent/dialect/sql"
)

// Dialog is the model entity for the Dialog schema.
type Dialog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta domain.DialogMeta `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DialogQuery when eager-loading is set.
	Edges       DialogEdges `json:"edges"`
	user_dialog *int
}

// DialogEdges holds the relations/edges for other nodes in the graph.
type DialogEdges struct {
	// Message holds the value of the message edge.
	Message []*Message
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading.
func (e DialogEdges) MessageOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.Message, nil
	}
	return nil, &NotLoadedError{edge: "message"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DialogEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dialog) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // create_time
		&sql.NullTime{},  // update_time
		&[]byte{},        // meta
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Dialog) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_dialog
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dialog fields.
func (d *Dialog) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dialog.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_time", values[0])
	} else if value.Valid {
		d.CreateTime = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_time", values[1])
	} else if value.Valid {
		d.UpdateTime = value.Time
	}

	if value, ok := values[2].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field meta", values[2])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &d.Meta); err != nil {
			return fmt.Errorf("unmarshal field meta: %v", err)
		}
	}
	values = values[3:]
	if len(values) == len(dialog.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_dialog", value)
		} else if value.Valid {
			d.user_dialog = new(int)
			*d.user_dialog = int(value.Int64)
		}
	}
	return nil
}

// QueryMessage queries the message edge of the Dialog.
func (d *Dialog) QueryMessage() *MessageQuery {
	return (&DialogClient{config: d.config}).QueryMessage(d)
}

// QueryUser queries the user edge of the Dialog.
func (d *Dialog) QueryUser() *UserQuery {
	return (&DialogClient{config: d.config}).QueryUser(d)
}

// Update returns a builder for updating this Dialog.
// Note that, you need to call Dialog.Unwrap() before calling this method, if this Dialog
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dialog) Update() *DialogUpdateOne {
	return (&DialogClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Dialog) Unwrap() *Dialog {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dialog is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dialog) String() string {
	var builder strings.Builder
	builder.WriteString("Dialog(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", meta=")
	builder.WriteString(fmt.Sprintf("%v", d.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// Dialogs is a parsable slice of Dialog.
type Dialogs []*Dialog

func (d Dialogs) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
